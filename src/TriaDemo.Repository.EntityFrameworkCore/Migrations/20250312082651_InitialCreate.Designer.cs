// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TriaDemo.Repository.EntityFrameworkCore;

#nullable disable

namespace TriaDemo.Repository.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(TriaDemoDbContext))]
    [Migration("20250312082651_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TriaDemo.Service.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.ToTable("Group", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca280668-67c8-47be-b023-89d5b8a96366"),
                            GroupName = "admin"
                        },
                        new
                        {
                            Id = new Guid("e93d60bd-594d-48cc-a000-b14b252a4b17"),
                            GroupName = "regular"
                        });
                });

            modelBuilder.Entity("TriaDemo.Service.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("TriaDemo.Service.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("46e8d539-effb-4589-92c0-4d6d81c4c1d9"),
                            Email = "josh.doe@gmail.com",
                            FirstName = "Josh",
                            IsActive = true,
                            LastName = "Doe",
                            PasswordHash = "AQAAAAIAAYagAAAAEL2J5/wSu5R9hegaDqliJkrwSunSP4iLaoA6ln28QUBKesrWFnjBiXV7Y8xVYiNVUQ=="
                        });
                });

            modelBuilder.Entity("TriaDemo.Service.Models.UserGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup", (string)null);

                    b.HasData(
                        new
                        {
                            GroupId = new Guid("ca280668-67c8-47be-b023-89d5b8a96366"),
                            UserId = new Guid("46e8d539-effb-4589-92c0-4d6d81c4c1d9")
                        });
                });

            modelBuilder.Entity("TriaDemo.Service.Models.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("NotificationId", "UserId")
                        .IsUnique();

                    b.ToTable("UserNotification", (string)null);
                });

            modelBuilder.Entity("TriaDemo.Service.Models.UserGroup", b =>
                {
                    b.HasOne("TriaDemo.Service.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TriaDemo.Service.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TriaDemo.Service.Models.UserNotification", b =>
                {
                    b.HasOne("TriaDemo.Service.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TriaDemo.Service.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
